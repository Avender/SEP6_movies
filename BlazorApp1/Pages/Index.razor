@page "/"
@inject ILogger<Counter> logger
@using BlazorApp1.Module
@using System.Net
@using System.Web.Script.Serialization
@using Newtonsoft.Json


<PageTitle>Index</PageTitle>

<MudLayout>
    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
        <MudItem xs="12" sm="6" md="4">
            @* <MudAutocomplete T="string" Label="Enter keywords..." @bind-Value="values" SearchFunc="@Search" *@
            @*                  ResetValueOnEmptyText="@resetValueOnEmptyText" *@
            @*                  CoerceText="@coerceText" CoerceValue="@coerceValue" *@
            @*                  AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" /> *@
            
            @*<MudInput T="String" @bind-Value="values" SearchMethod="@Search" />*@
        </MudItem>
        <MudGrid>
            <MudItem xs="6" sm="2">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 300px; width: 180px">
                    <MudImage Src="images/Spider-Man.png" Fluid="true" Alt="Spider-Man: No Way Home" Elevation="25" Class="rounded-lg"/>
                    <MudText Align="Align.Center">Spider-Man: No Way Home</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="6" sm="2">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 300px; width: 180px">
                    <MudImage Src="images/Spider-Man.png" Fluid="true" Alt="Spider-Man: No Way Home" Elevation="25" Class="rounded-lg"/>
                    <MudText Align="Align.Center">Spider-Man: No Way Home</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="6" sm="2">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 300px; width: 180px">
                    <MudImage Src="images/Spider-Man.png" Fluid="true" Alt="Spider-Man: No Way Home" Elevation="25" Class="rounded-lg"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="6" sm="2">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 300px; width: 180px">
                    <MudImage Src="images/Spider-Man.png" Fluid="true" Alt="Spider-Man: No Way Home" Elevation="25" Class="rounded-lg"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="6" sm="2">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 300px; width: 180px">
                    <MudImage Src="images/Spider-Man.png" Fluid="true" Alt="Spider-Man: No Way Home" Elevation="25" Class="rounded-lg"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="6" sm="2">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 300px; width: 180px">
                    <MudImage Src="images/Spider-Man.png" Fluid="true" Alt="Spider-Man: No Way Home" Elevation="25" Class="rounded-lg"/>
                </MudPaper>
            </MudItem>
            <MudItem xs="6" sm="2">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 300px; width: 180px">
                    <MudImage Src="images/Spider-Man.png" Fluid="true" Alt="Spider-Man: No Way Home" Elevation="25" Class="rounded-lg"/>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudLayout>

@code {
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private string values;
    private string[] movies =
    {
        "Spider-Man: No Way Home",
    };
    // public IEnumerable<MudImage> ImageList { get; set; } = new List<MudImage>();
    // public string SearchText = "";
    // List<MudImage> FilteredImages => new List<MudImage>().Where(
    //     img => img.Alt.ToLower().Contains(SearchText.ToLower())).ToList();
    
    // private string? SearchText { get; set; }
				// 			
    // private void FilterChangedAsync(ChangeEventArgs args)
    // {
    //     SearchText = args.Value.ToString();
    //     
    //     //do your stuff from here
    // }
    

    // private async Task<IEnumerable<string>> Search(string searchValue)
    // {
    // // In real life use an asynchronous function for fetching data from an api.
    // await Task.Delay(5);
    //
    // // if text is null or empty, don't return values (drop-down will not open)
    // if (string.IsNullOrEmpty(values))
    //     return new string[0];
    // return movies.Where(x => x.Contains(values, StringComparison.InvariantCultureIgnoreCase));
    // }
    
    //Deserializes the JSON and puts it in the MovieEntity object
    protected override void OnInitialized() 
    {
        string Title, Year,Rated,Released,Runtime,Genre,Director,Writer,Actors,Plot,Language,Country,Awards,Poster
            ,Metascore,imdbRating,imdbVotes,imdbID,Type,Response;
        
        Console.WriteLine("are we even here?");
        string url = "http://www.omdbapi.com/?i=tt10872600&apikey=7a662e38";
        using (WebClient wc = new WebClient())
        {
            Console.WriteLine("ALMOST IN");
            var json = wc.DownloadString(url);
            Console.WriteLine(json);
            MovieEntity obj = JsonConvert.DeserializeObject<MovieEntity>(json);
                Title = obj.Title;
                Year = obj.Year;
                Rated = obj.Rated;
                Released = obj.Released;
                Runtime = obj.Runtime;
                Genre = obj.Genre;
                Director = obj.Director;
                Writer = obj.Writer;
                Actors = obj.Actors;
                Plot = obj.Plot;
                Language = obj.Language;
                Country = obj.Country;
                Awards = obj.Awards;
                Poster = obj.Poster;
                Metascore = obj.Metascore;
                imdbRating = obj.imdbRating;
                imdbVotes = obj.imdbVotes;
                imdbID = obj.imdbID;
                Type = obj.Type;
                Response = obj.Response;
            Console.WriteLine("WE ARE IN "+Title);
        }
     } 
}
