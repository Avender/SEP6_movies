@page "/MovieDetails/{Value}"
@using System.Net
@using Newtonsoft.Json
@using MoviesFunction.Models
@using Newtonsoft.Json.Linq
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager


<MudLayout>
    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="3">
                <MudImage Width="300" Height="218" Src="@posterPath" Fluid="true" Alt="@movieTitle" Elevation="25" Class="rounded-lg"/>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">
                                @movieTitle
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div>
                            <span >
                                <MudButton Variant="Variant.Filled" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};")" Size="Size.Small">
                                    @voteAverage
                                </MudButton>
                            </span>
                            <span>
                                <MudButton Variant="Variant.Filled" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};")" Size="Size.Small">
                                    @runTime
                                </MudButton>
                            </span>
                        </div>
                        <MudText Class="pt-2">
                            @movieDescription
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Country:</span><span>@countryName</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Genre:</span><span>@genre</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Released:</span><span>@releaseDate</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Production:</span><span>@productionCompanies</span>
                        </MudText>
                        <MudText Class="pt-2">
                            <span class="pr-5">Casts:</span>
                            @for (int i = 0; i < 10; i++)
                            {
                                cast = people[i].name.ToString() + ", ";
                                var num = i;
                                <button>
                                    <a onclick="@(() => NamePage(people[num].id))">
                                        <span class="pr-2">
                                            @cast
                                        </span>
                                    </a>
                                </button>
                            }
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudLayout>

@code {

    [Parameter]
    public string Value { get; set; }

    public string posterPath { get; set; }
    public string movieTitle { get; set; }
    public string movieDescription { get; set; }
    public string runTime { get; set; }
    public string voteAverage { get; set; }
    public string releaseDate { set; get; }
    public List<ProductionCountry> productionCountry;
    public string countryName { get; set; }
    public List<Genre> genres;
    public string genre { get; set; }
    public List<ProductionCompany> productionCompanyList;
    public string productionCompanies { get; set; }
    public List<PeopleEntity> people = new();
    public string cast { get; set; }

    protected override void OnParametersSet()
    {
    //the param will be set now
        var id = Value;
        MovieDetailsApi(id);
        MovieCastApi(id);
    }

    private void MovieDetailsApi(string id)
    {
        string detailsUrl = "https://api.themoviedb.org/3/movie/" + id + "?api_key=a5ab4805002668ee4999f8bac7a4691d&language=en-US";
        using (WebClient wc = new WebClient())
        {
            var json = wc.DownloadString(detailsUrl);
            var obj = JsonConvert.DeserializeObject<Movie>(json);
            posterPath = "https://image.tmdb.org/t/p/w200" + obj.PosterPath;
            movieTitle = obj.Title;
            movieDescription = obj.Overview;
            runTime = obj.Runtime + " min";
            voteAverage = obj.VoteAverage + "/10";
            releaseDate = obj.ReleaseDate;
            productionCountry = obj.ProductionCountries;
            genres = obj.Genres;
            productionCompanyList = obj.ProductionCompanies;


            for (int i = 0; i < productionCountry.Count; i++)
            {
                if (i < productionCountry.Count - 1)
                {
                    countryName = productionCountry[i].Name.ToString() + ", ";
                }
                else
                {
                    countryName = productionCountry[i].Name.ToString();
                }
            }
    // foreach (var countryVar in productionCountry)
    // {
    //     countryName = countryVar.Name.ToString();
    // }

            for (int i = 0; i < genres.Count; i++)
            {
                if (i < genres.Count - 1)
                {
                    genre += genres[i].Name.ToString() + ", ";
                }
                else
                {
                    genre += genres[i].Name.ToString();
                }
            }
    // foreach (var genreVar in genres)
    // {
    //     genre += genreVar.Name.ToString() + ", ";
    // }

            for (int i = 0; i < productionCompanyList.Count; i++)
            {
                if (i < productionCompanyList.Count - 1)
                {
                    productionCompanies += productionCompanyList[i].Name.ToString() + ", ";
                }
                else
                {
                    productionCompanies += productionCompanyList[i].Name.ToString();
                }
            }
    // foreach (var companyVar in productionCompanyList)
    // {
    //     productionCompanies += companyVar.Name.ToString() + ", ";
    // }
        }
    }

    private void MovieCastApi(string id)
    {
        string peopleUrl = "https://api.themoviedb.org/3/movie/" + id + "/credits?api_key=a5ab4805002668ee4999f8bac7a4691d&language=en-US";
        using (WebClient wc = new WebClient())
        {
            var json = wc.DownloadString(peopleUrl);
            var resultObjects = AllChildren(JObject.Parse(json))
                .First(c => c.Type == JTokenType.Array && c.Path.Contains("cast"))
                .Children<JObject>();

            foreach (JObject result in resultObjects)
            {
                var obj = JsonConvert.DeserializeObject<PeopleEntity>(result.ToString());
                people.Add(obj);
            }

    // for (int i = 0; i < 10; i++)
    // {
    //     if (i < 9)
    //     {
    //         cast += people[i].name.ToString() + ", ";
    //     }
    //     else
    //     {
    //         cast += people[i].name.ToString();
    //     }
    // }
        }
    }

    private static IEnumerable<JToken> AllChildren(JToken json)
    {
        foreach (var c in json.Children())
        {
            yield return c;
            foreach (var cc in AllChildren(c))
            {
                yield return cc;
            }
        }
    }

    public  void NamePage(int id)
    {
        navigationManager.NavigateTo($"Name/{id}");
    }

}